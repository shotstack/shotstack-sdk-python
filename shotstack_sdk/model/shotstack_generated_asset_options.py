"""
    Shotstack

    Official Python SDK for the Shotstack Cloud Video Editing API

    The version of the OpenAPI document: v1
    Contact: pypi@shotstack.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from shotstack_sdk.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from shotstack_sdk.exceptions import ApiAttributeError


def lazy_import():
    from shotstack_sdk.model.shotstack_image_to_video_options import ShotstackImageToVideoOptions
    from shotstack_sdk.model.shotstack_text_generator_options import ShotstackTextGeneratorOptions
    from shotstack_sdk.model.shotstack_text_to_image_options import ShotstackTextToImageOptions
    from shotstack_sdk.model.shotstack_text_to_speech_options import ShotstackTextToSpeechOptions
    globals()['ShotstackImageToVideoOptions'] = ShotstackImageToVideoOptions
    globals()['ShotstackTextGeneratorOptions'] = ShotstackTextGeneratorOptions
    globals()['ShotstackTextToImageOptions'] = ShotstackTextToImageOptions
    globals()['ShotstackTextToSpeechOptions'] = ShotstackTextToSpeechOptions


class ShotstackGeneratedAssetOptions(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('type',): {
            'IMAGE-TO-VIDEO': "image-to-video",
        },
        ('language',): {
            'CMN-CN': "cmn-CN",
            'DA-DK': "da-DK",
            'DE-DE': "de-DE",
            'EN-AU': "en-AU",
            'EN-GB': "en-GB",
            'EN-IN': "en-IN",
            'EN-US': "en-US",
            'ES-ES': "es-ES",
            'ES-MX': "es-MX",
            'ES-US': "es-US",
            'FR-CA': "fr-CA",
            'FR-FR': "fr-FR",
            'IT-IT': "it-IT",
            'JA-JP': "ja-JP",
            'HI-IN': "hi-IN",
            'KO-KR': "ko-KR",
            'NB-NO': "nb-NO",
            'NL-NL': "nl-NL",
            'PL-PL': "pl-PL",
            'PT-BR': "pt-BR",
            'PT-PT': "pt-PT",
            'SV-SE': "sv-SE",
            'EN-NZ': "en-NZ",
            'EN-ZA': "en-ZA",
            'CA-ES': "ca-ES",
            'DE-AT': "de-AT",
            'YUE-CN': "yue-CN",
            'AR-AE': "ar-AE",
            'FI-FI': "fi-FI",
        },
        ('voice',): {
            'HALA': "Hala",
            'LISA': "Lisa",
            'ARLET': "Arlet",
            'HIUJIN': "Hiujin",
            'ZHIYU': "Zhiyu",
            'SOFIE': "Sofie",
            'LAURA': "Laura",
            'OLIVIA': "Olivia",
            'AMY': "Amy",
            'EMMA': "Emma",
            'BRIAN': "Brian",
            'ARTHUR': "Arthur",
            'KAJAL': "Kajal",
            'NIAMH': "Niamh",
            'ARIA': "Aria",
            'AYANDA': "Ayanda",
            'IVY': "Ivy",
            'JOANNA': "Joanna",
            'KENDRA': "Kendra",
            'KIMBERLY': "Kimberly",
            'SALLI': "Salli",
            'JOEY': "Joey",
            'JUSTIN': "Justin",
            'KEVIN': "Kevin",
            'MATTHEW': "Matthew",
            'RUTH': "Ruth",
            'STEPHEN': "Stephen",
            'SUVI': "Suvi",
            'LÉA': "Léa",
            'RÉMI': "Rémi",
            'GABRIELLE': "Gabrielle",
            'LIAM': "Liam",
            'VICKI': "Vicki",
            'DANIEL': "Daniel",
            'HANNAH': "Hannah",
            'KAJAL': "Kajal",
            'BIANCA': "Bianca",
            'ADRIANO': "Adriano",
            'TAKUMI': "Takumi",
            'KAZUHA': "Kazuha",
            'TOMOKO': "Tomoko",
            'SEOYEON': "Seoyeon",
            'IDA': "Ida",
            'OLA': "Ola",
            'CAMILA': "Camila",
            'VITÓRIA': "Vitória",
            'VITORIA': "Vitoria",
            'THIAGO': "Thiago",
            'INÊS': "Inês",
            'INES': "Ines",
            'LUCIA': "Lucia",
            'SERGIO': "Sergio",
            'MIA': "Mia",
            'ANDRÉS': "Andrés",
            'LUPE': "Lupe",
            'PEDRO': "Pedro",
            'ELIN': "Elin",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'type': (str,),  # noqa: E501
            'language': (str,),  # noqa: E501
            'newscaster': (bool,),  # noqa: E501
            'guidance_scale': (float,),  # noqa: E501
            'motion': (int,),  # noqa: E501
            'text': (str,),  # noqa: E501
            'voice': (str,),  # noqa: E501
            'prompt': (str,),  # noqa: E501
            'width': (int,),  # noqa: E501
            'height': (int,),  # noqa: E501
            'image_url': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        lazy_import()
        val = {
            'ShotstackImageToVideoOptions': ShotstackImageToVideoOptions,
            'ShotstackTextGeneratorOptions': ShotstackTextGeneratorOptions,
            'ShotstackTextToImageOptions': ShotstackTextToImageOptions,
            'ShotstackTextToSpeechOptions': ShotstackTextToSpeechOptions,
            'image-to-video': ShotstackImageToVideoOptions,
            'text-generator': ShotstackTextToImageOptions,
            'text-to-image': ShotstackTextToImageOptions,
            'text-to-speech': ShotstackTextToSpeechOptions,
        }
        if not val:
            return None
        return {'type': val}

    attribute_map = {
        'type': 'type',  # noqa: E501
        'language': 'language',  # noqa: E501
        'newscaster': 'newscaster',  # noqa: E501
        'guidance_scale': 'guidanceScale',  # noqa: E501
        'motion': 'motion',  # noqa: E501
        'text': 'text',  # noqa: E501
        'voice': 'voice',  # noqa: E501
        'prompt': 'prompt',  # noqa: E501
        'width': 'width',  # noqa: E501
        'height': 'height',  # noqa: E501
        'image_url': 'imageUrl',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ShotstackGeneratedAssetOptions - a model defined in OpenAPI

        Keyword Args:
            type (str): The type of asset to generate - set to `image-to-video` for image-to-video.. defaults to "image-to-video", must be one of ["image-to-video", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            language (str): The language code for the text-to-speech conversion. You must pair the correct language with the correct voice (see voice parameter above). Select a language from the list of available languages: <ul>   <li>`cmn-CN`</li>   <li>`da-DK`</li>   <li>`de-DE`</li>   <li>`en-AU`</li>   <li>`en-GB`</li>   <li>`en-IN`</li>   <li>`en-US`</li>   <li>`es-ES`</li>   <li>`es-MX`</li>   <li>`es-US`</li>   <li>`fr-CA`</li>   <li>`fr-FR`</li>   <li>`it-IT`</li>   <li>`ja-JP`</li>   <li>`hi-IN`</li>   <li>`ko-KR`</li>   <li>`nb-NO`</li>   <li>`nl-NL`</li>   <li>`pl-PL`</li>   <li>`pt-BR`</li>   <li>`pt-PT`</li>   <li>`sv-SE`</li>   <li>`en-NZ`</li>   <li>`en-ZA`</li>   <li>`ca-ES`</li>   <li>`de-AT`</li>   <li>`yue-CN`</li>   <li>`ar-AE`</li>   <li>`fi-FI`</li> </ul>. [optional] if omitted the server will use the default value of "en-US"  # noqa: E501
            newscaster (bool): Set the voice to newscaster mode.<br /><br /> *Only Matthew and Joanna for US English (en-US), Lupe for US Spanish (es-US), and Amy for British English (en-GB) are available in the newscaster voice.. [optional] if omitted the server will use the default value of False  # noqa: E501
            guidance_scale (float): The guidance scale determines how closely the generated video will match the image. Lower numbers allow for more creative freedom. A number between 0 and 10.. [optional] if omitted the server will use the default value of 1.8  # noqa: E501
            motion (int): The amount of motion in the video. A number between 1 and 255.. [optional] if omitted the server will use the default value of 127  # noqa: E501
            text (str): The text to convert to speech.. [optional]  # noqa: E501
            voice (str): The voice to use for the text-to-speech conversion. You must pair the correct voice with the correct language. For each language there is a language code that must be set in the `language` property. The voice must be available for the language code or the conversion will fail. i.e. To use the voice `Zeina` for Arabic you must set the `language` to `arb`. Select a voice from the list of available voices, the language code is in brackets: <ul>   <li>Arabic - Gulf (ar-AE)</li>   <ul>     <li>`Hala`</li>   </ul>   <li>Dutch - Belgian (nl-BE)</li>   <ul>     <li>`Lisa`</li>   </ul>   <li>Catalan (ca-ES)</li>   <ul>     <li>`Arlet`</li>   </ul>   <li>Chinese - Cantonese (yue-CN)</li>   <ul>     <li>`Hiujin`</li>   </ul>   <li>Chinese - Mandarin (cmn-CN)</li>   <ul>     <li>`Zhiyu`</li>   </ul>   <li>Danish (da-DK)</li>   <ul>     <li>`Sofie`</li>   </ul>   <li>Dutch (nl-NL)</li>   <ul>     <li>`Laura`</li>   </ul>   <li>English - Australian (en-AU)</li>   <ul>     <li>`Olivia`</li>   </ul>   <li>English - British (en-GB)</li>   <ul>     <li>`Amy`</li>     <li>`Emma`</li>     <li>`Brian`</li>     <li>`Arthur`</li>   </ul>   <li>English - Indian (en-IN)</li>   <ul>     <li>`Kajal`</li>   </ul>   <li>English - Ireland (en-IE)</li>   <ul>     <li>`Niamh`</li>   </ul>   <li>English - New Zealand (en-NZ)</li>   <ul>     <li>`Aria`</li>   </ul>   <li>English - South African (en-ZA)</li>   <ul>     <li>`Ayanda`</li>   </ul>   <li>English - US (en-US)</li>   <ul>     <li>`Ivy`</li>     <li>`Joanna`</li>     <li>`Kendra`</li>     <li>`Kimberly`</li>     <li>`Salli`</li>     <li>`Joey`</li>     <li>`Justin`</li>     <li>`Kevin`</li>     <li>`Matthew`</li>     <li>`Ruth`</li>     <li>`Stephen`</li>   </ul>   <li>Finnish (fi-FI)</li>   <ul>     <li>`Suvi`</li>   </ul>   <li>French (fr-FR)</li>   <ul>     <li>`Léa`</li>     <li>`Rémi`</li>   </ul>   <li>French - Canadian (fr-CA)</li>   <ul>     <li>`Gabrielle`</li>     <li>`Liam`</li>   </ul>   <li>German (de-DE)</li>   <ul>     <li>`Vicki`</li>     <li>`Daniel`</li>   </ul>   <li>German - Austrian (de-AT)</li>   <ul>     <li>`Hannah`</li>   </ul>   <li>Hindi (hi-IN)</li>   <ul>     <li>`Kajal`</li>   </ul>   <li>Italian (it-IT)</li>   <ul>     <li>`Bianca`</li>     <li>`Adriano`</li>   </ul>   <li>Japanese (ja-JP)</li>   <ul>     <li>`Takumi`</li>     <li>`Kazuha`</li>     <li>`Tomoko`</li>   </ul>   <li>Korean (ko-KR)</li>   <ul>     <li>`Seoyeon`</li>   </ul>   <li>Norwegian (nb-NO)</li>   <ul>     <li>`Ida`</li>   </ul>   <li>Polish (pl-PL)</li>   <ul>     <li>`Ola`</li>   </ul>   <li>Portuguese - Brazilian (pt-BR)</li>   <ul>     <li>`Camila`</li>     <li>`Vitória` or `Vitoria`</li>     <li>`Thiago`</li>   </ul>   <li>Portuguese - European (pt-PT)</li>   <ul>     <li>`Inês` or `Ines`</li>   </ul>   <li>Spanish (es-ES)</li>   <ul>     <li>`Lucia`</li>     <li>`Sergio`</li>   </ul>   <li>Spanish - Mexican (es-MX)</li>   <ul>     <li>`Mia`</li>     <li>`Andrés`</li>   </ul>   <li>Spanish - US (es-US)</li>   <ul>     <li>`Lupe`</li>     <li>`Pedro`</li>   </ul>   <li>Swedish (sv-SE)</li>   <ul>     <li>`Elin`</li>   </ul> </ul>. [optional]  # noqa: E501
            prompt (str): The text prompt to generate text from.. [optional]  # noqa: E501
            width (int): The width of the image in pixels.. [optional]  # noqa: E501
            height (int): The height of the image in pixels.. [optional]  # noqa: E501
            image_url (str): The URL of the image to convert to video. The URL must be publicly accessible or include credentials. The image dimensions must exactly match one of the following: 1024px x 576px, 576px x 1024px or 768px x 768px.. [optional]  # noqa: E501
        """

        type = kwargs.get('type', "image-to-video")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ShotstackGeneratedAssetOptions - a model defined in OpenAPI

        Keyword Args:
            type (str): The type of asset to generate - set to `image-to-video` for image-to-video.. defaults to "image-to-video", must be one of ["image-to-video", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            language (str): The language code for the text-to-speech conversion. You must pair the correct language with the correct voice (see voice parameter above). Select a language from the list of available languages: <ul>   <li>`cmn-CN`</li>   <li>`da-DK`</li>   <li>`de-DE`</li>   <li>`en-AU`</li>   <li>`en-GB`</li>   <li>`en-IN`</li>   <li>`en-US`</li>   <li>`es-ES`</li>   <li>`es-MX`</li>   <li>`es-US`</li>   <li>`fr-CA`</li>   <li>`fr-FR`</li>   <li>`it-IT`</li>   <li>`ja-JP`</li>   <li>`hi-IN`</li>   <li>`ko-KR`</li>   <li>`nb-NO`</li>   <li>`nl-NL`</li>   <li>`pl-PL`</li>   <li>`pt-BR`</li>   <li>`pt-PT`</li>   <li>`sv-SE`</li>   <li>`en-NZ`</li>   <li>`en-ZA`</li>   <li>`ca-ES`</li>   <li>`de-AT`</li>   <li>`yue-CN`</li>   <li>`ar-AE`</li>   <li>`fi-FI`</li> </ul>. [optional] if omitted the server will use the default value of "en-US"  # noqa: E501
            newscaster (bool): Set the voice to newscaster mode.<br /><br /> *Only Matthew and Joanna for US English (en-US), Lupe for US Spanish (es-US), and Amy for British English (en-GB) are available in the newscaster voice.. [optional] if omitted the server will use the default value of False  # noqa: E501
            guidance_scale (float): The guidance scale determines how closely the generated video will match the image. Lower numbers allow for more creative freedom. A number between 0 and 10.. [optional] if omitted the server will use the default value of 1.8  # noqa: E501
            motion (int): The amount of motion in the video. A number between 1 and 255.. [optional] if omitted the server will use the default value of 127  # noqa: E501
            text (str): The text to convert to speech.. [optional]  # noqa: E501
            voice (str): The voice to use for the text-to-speech conversion. You must pair the correct voice with the correct language. For each language there is a language code that must be set in the `language` property. The voice must be available for the language code or the conversion will fail. i.e. To use the voice `Zeina` for Arabic you must set the `language` to `arb`. Select a voice from the list of available voices, the language code is in brackets: <ul>   <li>Arabic - Gulf (ar-AE)</li>   <ul>     <li>`Hala`</li>   </ul>   <li>Dutch - Belgian (nl-BE)</li>   <ul>     <li>`Lisa`</li>   </ul>   <li>Catalan (ca-ES)</li>   <ul>     <li>`Arlet`</li>   </ul>   <li>Chinese - Cantonese (yue-CN)</li>   <ul>     <li>`Hiujin`</li>   </ul>   <li>Chinese - Mandarin (cmn-CN)</li>   <ul>     <li>`Zhiyu`</li>   </ul>   <li>Danish (da-DK)</li>   <ul>     <li>`Sofie`</li>   </ul>   <li>Dutch (nl-NL)</li>   <ul>     <li>`Laura`</li>   </ul>   <li>English - Australian (en-AU)</li>   <ul>     <li>`Olivia`</li>   </ul>   <li>English - British (en-GB)</li>   <ul>     <li>`Amy`</li>     <li>`Emma`</li>     <li>`Brian`</li>     <li>`Arthur`</li>   </ul>   <li>English - Indian (en-IN)</li>   <ul>     <li>`Kajal`</li>   </ul>   <li>English - Ireland (en-IE)</li>   <ul>     <li>`Niamh`</li>   </ul>   <li>English - New Zealand (en-NZ)</li>   <ul>     <li>`Aria`</li>   </ul>   <li>English - South African (en-ZA)</li>   <ul>     <li>`Ayanda`</li>   </ul>   <li>English - US (en-US)</li>   <ul>     <li>`Ivy`</li>     <li>`Joanna`</li>     <li>`Kendra`</li>     <li>`Kimberly`</li>     <li>`Salli`</li>     <li>`Joey`</li>     <li>`Justin`</li>     <li>`Kevin`</li>     <li>`Matthew`</li>     <li>`Ruth`</li>     <li>`Stephen`</li>   </ul>   <li>Finnish (fi-FI)</li>   <ul>     <li>`Suvi`</li>   </ul>   <li>French (fr-FR)</li>   <ul>     <li>`Léa`</li>     <li>`Rémi`</li>   </ul>   <li>French - Canadian (fr-CA)</li>   <ul>     <li>`Gabrielle`</li>     <li>`Liam`</li>   </ul>   <li>German (de-DE)</li>   <ul>     <li>`Vicki`</li>     <li>`Daniel`</li>   </ul>   <li>German - Austrian (de-AT)</li>   <ul>     <li>`Hannah`</li>   </ul>   <li>Hindi (hi-IN)</li>   <ul>     <li>`Kajal`</li>   </ul>   <li>Italian (it-IT)</li>   <ul>     <li>`Bianca`</li>     <li>`Adriano`</li>   </ul>   <li>Japanese (ja-JP)</li>   <ul>     <li>`Takumi`</li>     <li>`Kazuha`</li>     <li>`Tomoko`</li>   </ul>   <li>Korean (ko-KR)</li>   <ul>     <li>`Seoyeon`</li>   </ul>   <li>Norwegian (nb-NO)</li>   <ul>     <li>`Ida`</li>   </ul>   <li>Polish (pl-PL)</li>   <ul>     <li>`Ola`</li>   </ul>   <li>Portuguese - Brazilian (pt-BR)</li>   <ul>     <li>`Camila`</li>     <li>`Vitória` or `Vitoria`</li>     <li>`Thiago`</li>   </ul>   <li>Portuguese - European (pt-PT)</li>   <ul>     <li>`Inês` or `Ines`</li>   </ul>   <li>Spanish (es-ES)</li>   <ul>     <li>`Lucia`</li>     <li>`Sergio`</li>   </ul>   <li>Spanish - Mexican (es-MX)</li>   <ul>     <li>`Mia`</li>     <li>`Andrés`</li>   </ul>   <li>Spanish - US (es-US)</li>   <ul>     <li>`Lupe`</li>     <li>`Pedro`</li>   </ul>   <li>Swedish (sv-SE)</li>   <ul>     <li>`Elin`</li>   </ul> </ul>. [optional]  # noqa: E501
            prompt (str): The text prompt to generate text from.. [optional]  # noqa: E501
            width (int): The width of the image in pixels.. [optional]  # noqa: E501
            height (int): The height of the image in pixels.. [optional]  # noqa: E501
            image_url (str): The URL of the image to convert to video. The URL must be publicly accessible or include credentials. The image dimensions must exactly match one of the following: 1024px x 576px, 576px x 1024px or 768px x 768px.. [optional]  # noqa: E501
        """

        type = kwargs.get('type', "image-to-video")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
          ],
          'oneOf': [
              ShotstackImageToVideoOptions,
              ShotstackTextGeneratorOptions,
              ShotstackTextToImageOptions,
              ShotstackTextToSpeechOptions,
          ],
        }
